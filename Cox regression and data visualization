library(ggplot2)
library(survival)
library(survminer) 
library(RegParallel)

# Set the random seed for reproducibility
set.seed(2025.1)

# Parallelized Cox Proportional Hazards Regression
# Regressão de Cox Paralelizada
# -----------------------------------------------
# Uses RegParallel to test association between each gene and survival
# Usa RegParallel para testar associação entre cada gene e sobrevivência
res <- RegParallel(
  data = data_a,  # Input dataset (clinical + genomic data)
                  # Dados de entrada (clínicos + genômicos)
  formula = 'Surv(time = time, event = event) ~ `[*]`',  # Cox model template
                                                        # Modelo de Cox com placeholder
  FUN = function(formula, data_a)
    coxph(formula = formula,
          data = data_a,
          ties = 'breslow',  # Method for handling tied events
                            # Método para eventos concorrentes
          singular.ok = TRUE),  # Allows singular fits
                               # Permite ajustes singulares
  FUNtype = 'coxph',  # Specifies analysis type
                     # Tipo de análise
  variables = colnames(data_a)[6:ncol(data_a)],  # Selects genes (columns 6+)
                                               # Seleciona genes (colunas 6+)
  cores = 6,  # Number of CPU cores for parallel processing
             # Núcleos de CPU para processamento paralelo
  blocksize = 2000,  # Genes processed per block
                    # Genes processados por bloco
  nestedParallel = FALSE,  # Disables nested parallelism
                          # Desativa paralelismo aninhado
  conflevel = 95  # Confidence interval level
                 # Nível do intervalo de confiança
)

# Multiple Testing Correction
# Correção para Múltiplos Testes
# -----------------------------------------------
res$p_adj <- p.adjust(res$P, method = 'BH')  # Benjamini-Hochberg FDR adjustment
                                            # Ajuste FDR de Benjamini-Hochberg
res_sig <- res[res$P < 0.01,]  # Filters significant results (raw p < 0.01)
                              # Filtra resultados significativos (p < 0.01)

# Save significant results to Excel
# Salva resultados significativos em Excel
openxlsx::write.xlsx(res_sig, "~/Documents/MBA/TCC/Resultados/regression_results.xlsx")

# Beta coefficients indicate direction/strength of association:
# Os coeficientes Beta indicam direção/força da associação:
# - Positive Beta: Higher expression → increased risk (hazard)
#   Beta positivo: Maior expressão → maior risco
# - Negative Beta: Higher expression → decreased risk
#   Beta negativo: Maior expressão → menor risco

# Forest Plot of Hazard Ratios (Top 20 Genes)
# Gráfico de Floresta para Razões de Risco (Top 20 Genes)
# -----------------------------------------------
top_genes <- head(res_sig, 20)  # Selects top 20 significant genes
                               # Seleciona os 20 genes mais significativos

p <- ggplot(top_genes, aes(x = reorder(Variable, HR), y = HR)) +
  geom_point(color = "red", size = 3) +  # HR points
                                       # Pontos de HR
  geom_errorbar(aes(ymin = HRlower, ymax = HRupper),  # 95% CI
                                                     # IC 95%
  width = 0.2, color = "royalblue") +  
  geom_vline(xintercept = 1, linetype = "dashed") +  # Reference line (HR=1)
                                                   # Linha de referência (HR=1)
  coord_flip() +  # Horizontal orientation
                # Orientação horizontal
  theme_bw() +  # Clean background
              # Fundo limpo
  labs(x = "", y = "Hazard Ratio") +
  theme(axis.text = element_text(size = 20),  # Large font sizes
        axis.title = element_text(size = 20)) # Para melhor legibilidade

# Export high-resolution plot
# Exporta gráfico em alta resolução
png("florest plot cancer.png", width = 3500, height = 3000, res = 300, bg = "transparent")
print(p)
dev.off()

# Significant Results Table (Top 20)
# Tabela de Resultados Significativos (Top 20)
# -----------------------------------------------
res_table <- res_sig %>%
  filter(P < 0.05) %>%
  dplyr::select(Variable, P, HR) %>%
  arrange(P) %>%  # Sort by p-value
                # Ordena por valor-p
  head(20)

table_plot <- ggtexttable(
  res_table,
  theme = ttheme("light")  # Light-themed table
                          # Tabela com tema claro
)

png("table sig cancer.png", width = 2000, height = 2000, res = 300)
print(table_plot)
dev.off()

# Beta Coefficient Plot
# Gráfico de Coeficientes Beta
# -----------------------------------------------
p1 <- ggplot(top_genes, aes(x = reorder(Variable, Beta), y = Beta)) +
  geom_bar(stat = 'identity', fill = '#2973B2') +  # Blue bars
                                                 # Barras azuis
  geom_errorbar(aes(ymin = Beta - StandardError,  # Error bars
                  ymax = Beta + StandardError),   # Barras de erro
  width = 0.2, color = 'black') +  
  coord_flip() +
  labs(title = "Cox Regression Beta Coefficients",
       x = "Genes", 
       y = "Beta Value") +
  theme_bw() + 
  theme(text = element_text(size = 20))  # Uniform font size
                                       # Tamanho de fonte uniforme

png("Coeficientes Beta.png", width = 3500, height = 3000, res = 300)
print(p1)
dev.off()

# Hazard Ratio (HR) Interpretation:
# Interpretação da Razão de Risco (HR):
# - HR > 1: Variable increases risk
#   Variável aumenta o risco
# - HR < 1: Variable decreases risk
#   Variável diminui o risco

# Hazard Ratio Bar Plot
# Gráfico de Barras para Razão de Risco
# -----------------------------------------------
p2 <- ggplot(top_genes, aes(x = reorder(Variable, HR), y = HR)) +
  geom_bar(stat = 'identity', fill = '#48A6A7') +  # Teal bars
                                                 # Barras verdes-azuladas
  geom_errorbar(aes(ymin = HR - StandardError,    # Error bars
                  ymax = HR + StandardError),    # Barras de erro
  width = 0.2, color = 'black') +
  coord_flip() +
  labs(title = "Cox Hazard Ratios (HR)",
       x = "", 
       y = "Hazard Ratio") +
  theme_bw() +
  theme(text = element_text(size = 20))

png("Razão de Risco (HR).png", width = 3500, height = 3000, res = 300)
print(p2)
dev.off()
   



