library(UCSCXenaTools)
library(dplyr)

# Load the Xena data package
data(XenaData)

# Set the working directory for saving files
setwd("")

# Save the XenaData as a CSV file
write.csv(XenaData, "00_tblXenaHubInfo.csv")

# Subset XenaData to include specific columns
XenaData <- XenaData[,c(2,3,4,6,9,12,16,10)]

# View the XenaData for inspection
View(XenaData)

# Check unique values in the 'XenaCohorts' column
unique(XenaData$XenaCohorts)

# Filter XenaData for specific cohort (TCGA Acute Myeloid Leukemia - LAML)
XenaData <- subset(XenaData, subset = XenaCohorts == "TCGA Acute Myeloid Leukemia (LAML)")

# Generate gene expression data (RNAseq) for the 'tcgaHub'
GeneExpectedCnt_toil = XenaGenerate(subset = XenaHostNames == "tcgaHub")

# Filter the data to only include gene expression (RNAseq) for the selected cohort
XenaData <- subset(XenaData, subset = DataSubtype == "gene expression RNAseq")

# Apply additional filtering to the gene expression data (LAML cohort and survival data)
filtered = XenaFilter(GeneExpectedCnt_toil,
                      filterCohorts = "TCGA Acute Myeloid Leukemia (LAML)", 
                      filterDatasets = "survival/LAML_survival.txt") # "TCGA.DLBC.sampleMap/HiSeqV2" / TCGA.DLBC.sampleMap/DLBC_clinicalMatrix / survival/DLBC_survival.txt

# Query the filtered data and download it
XenaQuery(filtered) |> XenaDownload(destdir = "./")

# Uncomment these lines if you need to read in survival data and gene expression data (LAML)
# LAML <- read.delim("~/Documents/MBA/TCC/TCGA.LAML.sampleMap/HiSeqV2", row.names=1)
# mdata <- read.delim("survival/LAML_survival.txt")

# Create a data frame 'samples_LAML' with two columns: 'sample' (column names of LAML) and 'value' (initialized to NA)
samples_LAML <- data.frame("sample" = colnames(LAML),
                           "value" = NA)

# Replace hyphens with dots in the 'sample' column of 'mdata'
mdata$sample <- gsub("-", ".", mdata$sample)

# Replace hyphens with dots in the 'X_INTEGRATION' column of 'clinical'
clinical$X_INTEGRATION <- gsub("-", ".", clinical$X_INTEGRATION)

# Merge 'samples_LAML' with 'mdata' by the 'sample' column
mdata <- merge(samples_LAML, mdata, by = "sample")
  
# Subset 'mdata' to include only the first, fourth, and fifth columns
mdata <- mdata[, c(1, 4, 5)]

# Rename the first column of 'clinical' to 'sample'
names(clinical)[1] <- "sample"

# Merge 'samples_LAML' with 'clinical' by the 'sample' column
clinical <- merge(samples_LAML, clinical, by = "sample")

# Subset 'clinical' to include columns 1, 7, 15, and 36
clinical <- clinical[, c(1, 7, 15, 36)]

# Create a new data frame 'survival.data' containing survival-related information
survival.data <- data.frame(
  time = mdata$OS.time,  # Survival time
  event = mdata$OS,  # Censoring indicator (alive=0; dead=1)
  Id = mdata$sample, # Unique patient identifier
  age = clinical$age_at_initial_pathologic_diagnosis,  # Age at initial diagnosis
  gender = clinical$gender,  # Gender of the patient
  stage = clinical$clinical_stage  # Clinical stage at diagnosis
)

# Transpose the gene expression data
LAML_t <- data.frame(t(LAML))

# Add patient identifiers as row names in the transposed data
LAML_t$Id <- rownames(LAML_t)

# Clean up the patient IDs in the survival data (replace "-" with ".")
survival.data$Id <- gsub("-", ".", survival.data$Id)

# Merge the survival data with gene expression data on the 'Id' column
data_a <- merge(survival.data, LAML_t, by = "Id")

# Set the rownames of the merged data to the patient IDs and remove the 'Id' column
rownames(data_a) <- data_a$Id
data_a <- data_a[,-1]
